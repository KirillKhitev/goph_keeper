# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  pull_request:
  push:
    branches:
      - master
jobs:

  build:
    runs-on: ubuntu-latest
    container: golang:1.23

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: gk
        options: >-
          --health-cmd pg_isready
          --health-interval 5s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Install dependencies
      run: go mod download

    - name: Build agent
      run: |
          cd cmd/agent
          go build -buildvcs=false -o agent
    
    - name: Build server
      run: |
          cd cmd/server
          go build -buildvcs=false -o server

    - name: Run tests
      run: go test -race -coverprofile=coverage.txt -covermode=atomic ./...

    - name: Upload results to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}


  build-macos:
    runs-on: macOS-latest

    steps:
      - name: Build client
        run: |
          cd cmd/client
          go build -ldflags "-X main.buildVersion=$(date +'%Y%m%d') -X main.buildDate=$(date +'%Y-%m-%dT%H:%M:%S')" -buildvcs=false
      - name: zip macos artifact
        run: |
          zip -r macos out
      - name: upload macos artifact
        uses: actions/upload-artifact@v4
        with:
          name: uploads
          path: macos.zip

  build-linux:
    runs-on: ubuntu-latest

    steps:
      - name: Build client
        run: |
          cd cmd/client
          go build -ldflags "-X main.buildVersion=$(date +'%Y%m%d') -X main.buildDate=$(date +'%Y-%m-%dT%H:%M:%S')" -buildvcs=false
      - name: zip linux artifact
        run: |
          zip -r linux out
      - name: upload linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: uploads
          path: linux.zip

  build-windows:
    runs-on: windows-latest

    steps:
      - name: Build client
        run: |
          cd cmd/client
          go build -ldflags "-X main.buildVersion=$(date +'%Y%m%d') -X main.buildDate=$(date +'%Y-%m-%dT%H:%M:%S')" -buildvcs=false
      - name: zip win artifact
        run: |
          powershell Compress-Archive out windows.zip
      - name: upload windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: uploads
          path: windows.zip